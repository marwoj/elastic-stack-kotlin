### Elastic search is not only for searching

#Metrics: average, stats, min/max, percentiles etc.
#Buckets: histograms, ranges, distances, significant terms etc.
#Pipelines moving average, avarage bucket, cumulative sum etc.
# Matrix: matrix stats

# For sake of this http file:
# Run: python3 IndexRatings.py
# Run: python3 MoviesToJson.py > moremovies.json

### Import full movies dataset
PUT http://localhost:9200/_bulk?pretty
Content-Type: application/json

< ../data/moremovies.json

### Bucket by raging value

#size = 0 means do not return any search results
#create aggregation called `ratings`
GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "aggs": {
    "ratings": {
      "terms": {
        "field": "rating"
      }
    }
  }
}

### How many movies has rating = 5
GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "query": {
    "match": {
      "rating": 5.0
    }
  },
  "aggs": {
    "ratings": {
      "terms": {
        "field": "rating"
      }
    }
  }
}

### What is a rating for specific movie
### How many movies has rating = 5
GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "query": {
    "match_phrase": {
      "title": "Inception"
    }
  },
  "aggs": {
    "avg_ragin": {
      "avg": {
        "field": "rating"
      }
    }
  }
}

### TODO wojtek find movie with highest rating

### Histograms

###How many specific ratings were added
GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "aggs": {
    "whole_ratings": {
      "histogram": {
        "field": "rating",
        "interval": 1.0
      }
    }
  }
}

###How many movies was released in decade
GET http://localhost:9200/movies/_search?size=0
Content-Type: application/json

{
  "aggs": {
    "release": {
      "histogram": {
        "field": "year",
        "interval": 10
      }
    }
  }
}


### Time Series
# Elasticsearch knows about date rules ex. which timestamp belongs to January 2020 etc.

### Add up all hits to the webite by hour
GET http://localhost:9200/kafka-logs/_search?size=0
Content-Type: application/json

{
  "aggs": {
    "timestamp": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "hour"
      }
    }
  }
}

### When and how many requests googlebot sends to our page
GET http://localhost:9200/kafka-logs/_search?size=0
Content-Type: application/json

{
  "query": {
    "match": {
      "agent": "Googlebot"
    }
  },
  "aggs": {
    "timestamp": {
      "date_histogram": {
        "field": "@timestamp",
        "interval": "hour"
      }
    }
  }
}


### Nested aggregations

### What is a raging of each star wars movie?

GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "query": {
    "match_phrase": {
      "title": "Star Wars"
    }
  },
  "aggs": {
    "titles": {
      "terms": {
        "field": "title"
      },
      "aggs": {
        "avg.rating": {
          "avg": {
            "field": "rating"
          }
        }
      }
    }
  }
}

### Ups id doesn't work - index has to be changed
DELETE http://localhost:9200/ratings

### Index has to be recreated

PUT http://localhost:9200/ratings
Content-Type: application/json

{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "fielddata": "true",
        "fields": {
          "raw": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

### Re-import data
# Run: python3 IndexRatingsV2.py

### Run request once again. Add:  "field": "title.raw"

GET http://localhost:9200/ratings/_search?size=0
Content-Type: application/json

{
  "query": {
    "match_phrase": {
      "title": "Star Wars"
    }
  },
  "aggs": {
    "titles": {
      "terms": {
        "field": "title.raw"
      },
      "aggs": {
        "avg.rating": {
          "avg": {
            "field": "rating"
          }
        }
      }
    }
  }
}

